const ActiveDirectory = require('activedirectory');

// üîß Configuration LDAP
const config = {
  url: "ldap://172.16.110.2:389",
  baseDN: "DC=sodim,DC=corp",
};

const ad = new ActiveDirectory(config);

// üë§ Compte par d√©faut (fallback si LDAP indisponible)
const DEFAULT_ACCOUNT = {
  username: "admin@sodim.corp",
  password: "admin123",
  displayName: "Administrateur Local",
  email: "admin@sodim.corp",
  title: "Administrateur",
  department: "Informatique",
};

/**
 * üîê Authentifie un utilisateur
 * Essaie d‚Äôabord sur LDAP, sinon sur le compte par d√©faut
 */
function authenticateUser(username, password) {
  return new Promise((resolve) => {
    if (!username || !password) {
      console.warn("‚ö†Ô∏è Username ou password manquant");
      return resolve(false);
    }

    ad.authenticate(username, password, (err, auth) => {
      if (err) {
        console.error("‚ö†Ô∏è LDAP non disponible ou erreur:", err.message);

        // ‚úÖ Fallback sur le compte par d√©faut
        if (
          username === DEFAULT_ACCOUNT.username &&
          password === DEFAULT_ACCOUNT.password
        ) {
          console.log("‚úÖ Authentifi√© via compte local par d√©faut");
          return resolve(true);
        }

        return resolve(false);
      }

      if (auth) {
        console.log(`‚úÖ LDAP: utilisateur "${username}" authentifi√©`);
        resolve(true);
      } else {
        console.warn(`‚ùå LDAP: √©chec d‚Äôauthentification pour "${username}"`);

        // ‚úÖ Fallback local si LDAP r√©pond mais refuse
        if (
          username === DEFAULT_ACCOUNT.username &&
          password === DEFAULT_ACCOUNT.password
        ) {
          console.log("‚úÖ Authentifi√© via compte local par d√©faut");
          return resolve(true);
        }

        resolve(false);
      }
    });
  });
}

/**
 * üë§ R√©cup√®re les infos d‚Äôun utilisateur
 * Si LDAP √©choue, renvoie le compte local par d√©faut
 */
function getUserInfo(username) {
  return new Promise((resolve) => {
    if (!username) {
      console.warn("‚ö†Ô∏è Username manquant");
      return resolve(null);
    }

    const sanitizedUsername = username.trim().toLowerCase();

    ad.findUser(sanitizedUsername, (err, user) => {
      if (err) {
        console.error("‚ö†Ô∏è LDAP indisponible, retour compte par d√©faut");
        if (sanitizedUsername === DEFAULT_ACCOUNT.username) {
          return resolve(DEFAULT_ACCOUNT);
        }
        return resolve(null);
      }

      if (!user) {
        console.warn(`‚ÑπÔ∏è Utilisateur ${sanitizedUsername} non trouv√© dans LDAP`);
        if (sanitizedUsername === DEFAULT_ACCOUNT.username) {
          return resolve(DEFAULT_ACCOUNT);
        }
        return resolve(null);
      }

      const userInfo = {
        username: user.sAMAccountName || "",
        displayName: user.displayName || "",
        email: user.mail || "",
        title: user.title || "",
        department: user.department || "",
      };

      console.log("üë§ LDAP User Info:", userInfo);
      resolve(userInfo);
    });
  });
}

module.exports = {
  authenticateUser,
  getUserInfo,
};
